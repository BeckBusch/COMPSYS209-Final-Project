
209 Project UART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002c  00800100  0000027a  000002ee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000027a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000031a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000034c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  0000038c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000add  00000000  00000000  000003dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000761  00000000  00000000  00000eb9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000419  00000000  00000000  0000161a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000078  00000000  00000000  00001a34  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000045a  00000000  00000000  00001aac  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000184  00000000  00000000  00001f06  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  0000208a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea e7       	ldi	r30, 0x7A	; 122
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 32       	cpi	r26, 0x2C	; 44
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 83 00 	call	0x106	; 0x106 <main>
  8e:	0c 94 3b 01 	jmp	0x276	; 0x276 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <usart_init>:
#include "headers.h"

#include <avr/io.h>
#include <stdio.h>

void usart_init(uint16_t ubrr) {
  96:	9c 01       	movw	r18, r24

	UCSR0B |= (1 << TXCIE0) | (1 << TXEN0);
  98:	e1 ec       	ldi	r30, 0xC1	; 193
  9a:	f0 e0       	ldi	r31, 0x00	; 0
  9c:	90 81       	ld	r25, Z
  9e:	98 64       	ori	r25, 0x48	; 72
  a0:	90 83       	st	Z, r25
	UBRR0 = ubrr;
  a2:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
  a6:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
  aa:	08 95       	ret

000000ac <usart_transmit>:

}

void usart_transmit(uint8_t data) {

	while ((UCSR0A & (1 << UDRE0)) == 0) {
  ac:	e0 ec       	ldi	r30, 0xC0	; 192
  ae:	f0 e0       	ldi	r31, 0x00	; 0
  b0:	90 81       	ld	r25, Z
  b2:	95 ff       	sbrs	r25, 5
  b4:	fd cf       	rjmp	.-6      	; 0xb0 <usart_transmit+0x4>

	}
	UDR0 = data;
  b6:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
  ba:	08 95       	ret

000000bc <digits>:

}

void digits(uint8_t number, uint8_t *valueArray) {
  bc:	fb 01       	movw	r30, r22
	valueArray[0] = number / 100;
  be:	99 e2       	ldi	r25, 0x29	; 41
  c0:	89 9f       	mul	r24, r25
  c2:	91 2d       	mov	r25, r1
  c4:	11 24       	eor	r1, r1
  c6:	92 95       	swap	r25
  c8:	9f 70       	andi	r25, 0x0F	; 15
  ca:	90 83       	st	Z, r25
	valueArray[1] = (number / 10) % 10;
  cc:	9d ec       	ldi	r25, 0xCD	; 205
  ce:	89 9f       	mul	r24, r25
  d0:	21 2d       	mov	r18, r1
  d2:	11 24       	eor	r1, r1
  d4:	26 95       	lsr	r18
  d6:	26 95       	lsr	r18
  d8:	26 95       	lsr	r18
  da:	29 9f       	mul	r18, r25
  dc:	91 2d       	mov	r25, r1
  de:	11 24       	eor	r1, r1
  e0:	96 95       	lsr	r25
  e2:	96 95       	lsr	r25
  e4:	96 95       	lsr	r25
  e6:	99 0f       	add	r25, r25
  e8:	39 2f       	mov	r19, r25
  ea:	33 0f       	add	r19, r19
  ec:	33 0f       	add	r19, r19
  ee:	93 0f       	add	r25, r19
  f0:	32 2f       	mov	r19, r18
  f2:	39 1b       	sub	r19, r25
  f4:	31 83       	std	Z+1, r19	; 0x01
	valueArray[2] = number % 10;
  f6:	22 0f       	add	r18, r18
  f8:	92 2f       	mov	r25, r18
  fa:	99 0f       	add	r25, r25
  fc:	99 0f       	add	r25, r25
  fe:	29 0f       	add	r18, r25
 100:	82 1b       	sub	r24, r18
 102:	82 83       	std	Z+2, r24	; 0x02
 104:	08 95       	ret

00000106 <main>:

#define PeakVoltage 145
#define RMSCurrent 125
#define Power 160

int main(void) {
 106:	cf 93       	push	r28
 108:	df 93       	push	r29
 10a:	cd b7       	in	r28, 0x3d	; 61
 10c:	de b7       	in	r29, 0x3e	; 62
 10e:	e4 97       	sbiw	r28, 0x34	; 52
 110:	0f b6       	in	r0, 0x3f	; 63
 112:	f8 94       	cli
 114:	de bf       	out	0x3e, r29	; 62
 116:	0f be       	out	0x3f, r0	; 63
 118:	cd bf       	out	0x3d, r28	; 61
	// Initialization
	usart_init(12);
 11a:	8c e0       	ldi	r24, 0x0C	; 12
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	0e 94 4b 00 	call	0x96	; 0x96 <usart_init>
	uint8_t voltageText[17] = {80, 101, 97, 107, 32, 86, 111, 108, 116, 97, 103, 101, 32, 105, 115, 58, 32};
 122:	81 e1       	ldi	r24, 0x11	; 17
 124:	e0 e0       	ldi	r30, 0x00	; 0
 126:	f1 e0       	ldi	r31, 0x01	; 1
 128:	de 01       	movw	r26, r28
 12a:	11 96       	adiw	r26, 0x01	; 1
 12c:	01 90       	ld	r0, Z+
 12e:	0d 92       	st	X+, r0
 130:	8a 95       	dec	r24
 132:	e1 f7       	brne	.-8      	; 0x12c <main+0x26>
	uint8_t currentText[16] = {82, 77, 83, 32, 67, 117, 114, 114, 101, 110, 116, 32, 105, 115, 58, 32};
 134:	80 e1       	ldi	r24, 0x10	; 16
 136:	e1 e1       	ldi	r30, 0x11	; 17
 138:	f1 e0       	ldi	r31, 0x01	; 1
 13a:	de 01       	movw	r26, r28
 13c:	52 96       	adiw	r26, 0x12	; 18
 13e:	01 90       	ld	r0, Z+
 140:	0d 92       	st	X+, r0
 142:	8a 95       	dec	r24
 144:	e1 f7       	brne	.-8      	; 0x13e <main+0x38>
	uint8_t powerText[10] = {80, 111, 119, 101, 114, 32, 105, 115, 58, 32};
 146:	8a e0       	ldi	r24, 0x0A	; 10
 148:	e1 e2       	ldi	r30, 0x21	; 33
 14a:	f1 e0       	ldi	r31, 0x01	; 1
 14c:	de 01       	movw	r26, r28
 14e:	92 96       	adiw	r26, 0x22	; 34
 150:	01 90       	ld	r0, Z+
 152:	0d 92       	st	X+, r0
 154:	8a 95       	dec	r24
 156:	e1 f7       	brne	.-8      	; 0x150 <main+0x4a>
	
	// Preparation - can be moved inside the run loop when values are actually changing
	uint8_t voltageDigits[3]; uint8_t currentDigits[3]; uint8_t powerDigits[3];
	
	digits(PeakVoltage, voltageDigits);
 158:	be 01       	movw	r22, r28
 15a:	64 5d       	subi	r22, 0xD4	; 212
 15c:	7f 4f       	sbci	r23, 0xFF	; 255
 15e:	81 e9       	ldi	r24, 0x91	; 145
 160:	0e 94 5e 00 	call	0xbc	; 0xbc <digits>
	digits(RMSCurrent, currentDigits);
 164:	be 01       	movw	r22, r28
 166:	61 5d       	subi	r22, 0xD1	; 209
 168:	7f 4f       	sbci	r23, 0xFF	; 255
 16a:	8d e7       	ldi	r24, 0x7D	; 125
 16c:	0e 94 5e 00 	call	0xbc	; 0xbc <digits>
	digits(Power, powerDigits);
 170:	be 01       	movw	r22, r28
 172:	6e 5c       	subi	r22, 0xCE	; 206
 174:	7f 4f       	sbci	r23, 0xFF	; 255
 176:	80 ea       	ldi	r24, 0xA0	; 160
 178:	0e 94 5e 00 	call	0xbc	; 0xbc <digits>
 17c:	7e 01       	movw	r14, r28
 17e:	22 e1       	ldi	r18, 0x12	; 18
 180:	e2 0e       	add	r14, r18
 182:	f1 1c       	adc	r15, r1
 184:	6e 01       	movw	r12, r28
 186:	82 e2       	ldi	r24, 0x22	; 34
 188:	c8 0e       	add	r12, r24
 18a:	d1 1c       	adc	r13, r1
 18c:	4e 01       	movw	r8, r28
 18e:	92 e3       	ldi	r25, 0x32	; 50
 190:	89 0e       	add	r8, r25
 192:	91 1c       	adc	r9, r1
 194:	5e 01       	movw	r10, r28
 196:	ec e2       	ldi	r30, 0x2C	; 44
 198:	ae 0e       	add	r10, r30
 19a:	b1 1c       	adc	r11, r1
 19c:	8e 01       	movw	r16, r28
 19e:	0f 5f       	subi	r16, 0xFF	; 255
 1a0:	1f 4f       	sbci	r17, 0xFF	; 255
	
	// Run Loop
	while(1) {
		// Print Voltage label
		for (int i=0; i<17; i++){
			usart_transmit(voltageText[i]);
 1a2:	f8 01       	movw	r30, r16
 1a4:	81 91       	ld	r24, Z+
 1a6:	8f 01       	movw	r16, r30
 1a8:	0e 94 56 00 	call	0xac	; 0xac <usart_transmit>
	digits(Power, powerDigits);
	
	// Run Loop
	while(1) {
		// Print Voltage label
		for (int i=0; i<17; i++){
 1ac:	e0 16       	cp	r14, r16
 1ae:	f1 06       	cpc	r15, r17
 1b0:	c1 f7       	brne	.-16     	; 0x1a2 <main+0x9c>
			usart_transmit(voltageText[i]);
		}
		// Print Voltage digits
		usart_transmit(voltageDigits[0]+48);
 1b2:	8c a5       	ldd	r24, Y+44	; 0x2c
 1b4:	80 5d       	subi	r24, 0xD0	; 208
 1b6:	0e 94 56 00 	call	0xac	; 0xac <usart_transmit>
		usart_transmit(voltageDigits[1]+48);
 1ba:	8d a5       	ldd	r24, Y+45	; 0x2d
 1bc:	80 5d       	subi	r24, 0xD0	; 208
 1be:	0e 94 56 00 	call	0xac	; 0xac <usart_transmit>
		usart_transmit(PERIOD);
 1c2:	8e e2       	ldi	r24, 0x2E	; 46
 1c4:	0e 94 56 00 	call	0xac	; 0xac <usart_transmit>
		usart_transmit(voltageDigits[2]+48);
 1c8:	8e a5       	ldd	r24, Y+46	; 0x2e
 1ca:	80 5d       	subi	r24, 0xD0	; 208
 1cc:	0e 94 56 00 	call	0xac	; 0xac <usart_transmit>
		// Print Newline
		usart_transmit(NEWLINE);
 1d0:	8a e0       	ldi	r24, 0x0A	; 10
 1d2:	0e 94 56 00 	call	0xac	; 0xac <usart_transmit>
		usart_transmit(RETURN);
 1d6:	8d e0       	ldi	r24, 0x0D	; 13
 1d8:	0e 94 56 00 	call	0xac	; 0xac <usart_transmit>
 1dc:	8e 01       	movw	r16, r28
 1de:	0e 5e       	subi	r16, 0xEE	; 238
 1e0:	1f 4f       	sbci	r17, 0xFF	; 255
		
		// Print Current label
		for (int i=0; i<16; i++){
			usart_transmit(currentText[i]);
 1e2:	f8 01       	movw	r30, r16
 1e4:	81 91       	ld	r24, Z+
 1e6:	8f 01       	movw	r16, r30
 1e8:	0e 94 56 00 	call	0xac	; 0xac <usart_transmit>
		// Print Newline
		usart_transmit(NEWLINE);
		usart_transmit(RETURN);
		
		// Print Current label
		for (int i=0; i<16; i++){
 1ec:	c0 16       	cp	r12, r16
 1ee:	d1 06       	cpc	r13, r17
 1f0:	c1 f7       	brne	.-16     	; 0x1e2 <main+0xdc>
 1f2:	8e 01       	movw	r16, r28
 1f4:	01 5d       	subi	r16, 0xD1	; 209
 1f6:	1f 4f       	sbci	r17, 0xFF	; 255
			usart_transmit(currentText[i]);
		}
		// Print Current digits
		for (int i=0; i<3; i++){
			usart_transmit(currentDigits[i]+48);
 1f8:	f8 01       	movw	r30, r16
 1fa:	81 91       	ld	r24, Z+
 1fc:	8f 01       	movw	r16, r30
 1fe:	80 5d       	subi	r24, 0xD0	; 208
 200:	0e 94 56 00 	call	0xac	; 0xac <usart_transmit>
		// Print Current label
		for (int i=0; i<16; i++){
			usart_transmit(currentText[i]);
		}
		// Print Current digits
		for (int i=0; i<3; i++){
 204:	80 16       	cp	r8, r16
 206:	91 06       	cpc	r9, r17
 208:	b9 f7       	brne	.-18     	; 0x1f8 <main+0xf2>
			usart_transmit(currentDigits[i]+48);
		}
		// Print Newline
		usart_transmit(NEWLINE);
 20a:	8a e0       	ldi	r24, 0x0A	; 10
 20c:	0e 94 56 00 	call	0xac	; 0xac <usart_transmit>
		usart_transmit(RETURN);
 210:	8d e0       	ldi	r24, 0x0D	; 13
 212:	0e 94 56 00 	call	0xac	; 0xac <usart_transmit>
 216:	8e 01       	movw	r16, r28
 218:	0e 5d       	subi	r16, 0xDE	; 222
 21a:	1f 4f       	sbci	r17, 0xFF	; 255
		
		// Print Power label
		for (int i=0; i<10; i++){
			usart_transmit(powerText[i]);
 21c:	f8 01       	movw	r30, r16
 21e:	81 91       	ld	r24, Z+
 220:	8f 01       	movw	r16, r30
 222:	0e 94 56 00 	call	0xac	; 0xac <usart_transmit>
		// Print Newline
		usart_transmit(NEWLINE);
		usart_transmit(RETURN);
		
		// Print Power label
		for (int i=0; i<10; i++){
 226:	a0 16       	cp	r10, r16
 228:	b1 06       	cpc	r11, r17
 22a:	c1 f7       	brne	.-16     	; 0x21c <main+0x116>
			usart_transmit(powerText[i]);
		}
		// Print Power digits
		usart_transmit(powerDigits[0]+48);
 22c:	8a a9       	ldd	r24, Y+50	; 0x32
 22e:	80 5d       	subi	r24, 0xD0	; 208
 230:	0e 94 56 00 	call	0xac	; 0xac <usart_transmit>
		usart_transmit(PERIOD);
 234:	8e e2       	ldi	r24, 0x2E	; 46
 236:	0e 94 56 00 	call	0xac	; 0xac <usart_transmit>
		usart_transmit(powerDigits[1]+48);
 23a:	8b a9       	ldd	r24, Y+51	; 0x33
 23c:	80 5d       	subi	r24, 0xD0	; 208
 23e:	0e 94 56 00 	call	0xac	; 0xac <usart_transmit>
		usart_transmit(powerDigits[2]+48);
 242:	8c a9       	ldd	r24, Y+52	; 0x34
 244:	80 5d       	subi	r24, 0xD0	; 208
 246:	0e 94 56 00 	call	0xac	; 0xac <usart_transmit>
		// Print Newline
		usart_transmit(NEWLINE);
 24a:	8a e0       	ldi	r24, 0x0A	; 10
 24c:	0e 94 56 00 	call	0xac	; 0xac <usart_transmit>
		usart_transmit(RETURN);
 250:	8d e0       	ldi	r24, 0x0D	; 13
 252:	0e 94 56 00 	call	0xac	; 0xac <usart_transmit>
		
		// Print Newline
		usart_transmit(NEWLINE);
 256:	8a e0       	ldi	r24, 0x0A	; 10
 258:	0e 94 56 00 	call	0xac	; 0xac <usart_transmit>
		usart_transmit(RETURN);
 25c:	8d e0       	ldi	r24, 0x0D	; 13
 25e:	0e 94 56 00 	call	0xac	; 0xac <usart_transmit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 262:	ff e7       	ldi	r31, 0x7F	; 127
 264:	2a e1       	ldi	r18, 0x1A	; 26
 266:	86 e0       	ldi	r24, 0x06	; 6
 268:	f1 50       	subi	r31, 0x01	; 1
 26a:	20 40       	sbci	r18, 0x00	; 0
 26c:	80 40       	sbci	r24, 0x00	; 0
 26e:	e1 f7       	brne	.-8      	; 0x268 <main+0x162>
 270:	00 c0       	rjmp	.+0      	; 0x272 <main+0x16c>
 272:	00 00       	nop
 274:	93 cf       	rjmp	.-218    	; 0x19c <main+0x96>

00000276 <_exit>:
 276:	f8 94       	cli

00000278 <__stop_program>:
 278:	ff cf       	rjmp	.-2      	; 0x278 <__stop_program>
